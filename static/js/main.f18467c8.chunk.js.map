{"version":3,"sources":["containers/App.js","components/PhoneInfo.js","components/PhoneInfoForm.js","components/PhoneInfoList.js","modules/phoneInfo.js","containers/PhoneInfoListContainer.js","serviceWorker.js","modules/index.js","index.js"],"names":["App","react_default","a","createElement","className","containers_PhoneInfoListContainer","Component","PhoneInfo","_ref","username","phone","style","textAlign","PhoneInfoForm","onSave","formik_esm","validate","values","props","errors","test","onSubmit","_ref2","setSubmitting","resetForm","setTimeout","alert","JSON","stringify","touched","isSubmitting","handleChange","handleSubmit","htmlFor","display","id","placeholder","type","value","onChange","disabled","PhoneInfoList","list","data","map","info","components_PhoneInfo","key","index","ADD","REMOVE","add","createAction","remove","handleActions","_handleActions","Object","defineProperty","state","action","phoneInfoList","concat","payload","objectSpread","slice","PhoneInfoListContainer","_this","PhoneInfoActions","this","console","log","src_components_PhoneInfoForm","components_PhoneInfoList","connect","phoneInfo","dispatch","bindActionCreators","phoneInfoActions","Boolean","window","location","hostname","match","combineReducers","store","createStore","reducers","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f18467c8.chunk.js","sourcesContent":["// src/containers/App.js\n\nimport React, { Component } from 'react';\nimport './App.css';\n\nimport {\n  PhoneInfoListContainer,\n} from '../containers';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        {/* phone-info list Container */}\n        <PhoneInfoListContainer />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// src/components/PhoneInfo.js\nimport React from 'react';\n\nconst PhoneInfo = ({ username, phone }) => {\n  \n  return (\n    <div style={{ textAlign: 'center' }}>\n      <span><b>{ username }</b> :: { phone }</span>\n    </div>\n  );\n};\n\nexport default PhoneInfo;","// src/components/PhoneInfoForm.js\n\nimport React from 'react';\nimport { Formik } from 'formik';\nimport './PhoneInfoForm.css';\n\nconst PhoneInfoForm = ({ onSave }) => {\n  return (\n    <Formik\n      validate={(values, props) => {\n        let errors = {};\n\n        // validate 'username'\n        if (!values.username) {\n          errors.username = '필수 입력항목입니다.';\n        }\n        else if (!/^[a-zA-Z]{1,8}$/.test(values.username)) {\n          errors.username = '영문 대/소문자만 입력가능합니다. (최대 8자)';\n        }\n\n        // validate 'phone'\n        if (!values.phone) {\n          errors.phone = '필수 입력항목입니다.';\n        }\n        else if (!/^[\\d]{1,11}$/.test(values.phone)) {\n          errors.phone = '숫자만 입력가능합니다. (최대 11자)';\n        }\n        \n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n          onSave(values);\n          resetForm({});\n        }, 500);\n      }}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleSubmit,\n        } = props;\n        return (\n          <form onSubmit={handleSubmit}>\n            {/* 이름 입력 input */}\n            <label \n              htmlFor=\"username\"\n              style= {{ display: \"block\" }}\n            >\n              이름\n            </label>\n            <input\n              id=\"username\"\n              placeholder=\"이름을 입력하세요.\"\n              type=\"text\"\n              value={values.username || ''}\n              onChange={handleChange} \n              className={\n                errors.username && touched.username ? 'text-input error' : 'text-input'\n              }\n            />\n            {\n              errors.username && \n              touched.username && <div className=\"input-feedback\">{errors.username}</div>\n            }\n\n            {/* 전화번호 입력 input */}\n            <label \n              htmlFor=\"phone\"\n              style= {{ display: \"block\" }}\n            >\n              번호\n            </label>\n            <input\n              id=\"phone\"\n              placeholder=\"전화번호를 입력하세요.\"\n              type=\"text\"\n              value={values.phone || ''}\n              onChange={handleChange} \n              className={\n                errors.phone && touched.phone ? 'text-input error' : 'text-input'\n              }\n            />\n            {\n              errors.phone && \n              touched.phone && <div className=\"input-feedback\">{errors.phone}</div>\n            }\n            <div>\n              <button \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                Submit\n              </button>\n            </div>\n          </form>\n        );\n\n      }}\n    </Formik>\n  )\n};\n\nexport default PhoneInfoForm;","// src/components/PhoneInfoList.js\nimport React from 'react';\nimport {\n  PhoneInfo,\n} from '../components';\n\nconst PhoneInfoList = ({ data }) => {\n  const list = data.map( info => (\n    <PhoneInfo \n      key={info.index}\n      username={info.username}\n      phone={info.phone}\n    />\n  ));\n  return (\n    <div>\n      { list }\n    </div>\n  );\n};\n\nexport default PhoneInfoList;","// src/modules/phonInfo.js\nimport { createAction, handleActions } from 'redux-actions';\n\n// action types\nconst ADD = 'phoneInfoList/ADD';\nconst REMOVE = 'phoneInfoList/REMOVE';\n\n// action constructors\nexport const add = createAction(ADD); // param : info\nexport const remove = createAction(REMOVE); // param : index\n\nconst initialState = {\n  index: 0,\n  phoneInfoList: [],\n};\n\nexport default handleActions({\n\n  [ADD]:  ( state, action ) => {\n    const { index, phoneInfoList } = state;\n    return {\n      index: index + 1,\n      phoneInfoList: phoneInfoList.concat({\n        index: index,\n        username: action.payload.username,\n        phone: action.payload.phone,\n      })\n    };\n  },\n\n  [REMOVE]:  ( state, action ) => {\n    const { phoneInfoList } = state;\n    return {\n      ...state,\n      phoneInfoList: phoneInfoList.slice(0, action.payload)\n    };\n  },\n\n}, initialState);","// src/containers/PhoneInfoListContainer.js\nimport React, { Component } from 'react';\nimport {\n  PhoneInfoForm,\n  PhoneInfoList,\n} from '../components';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport * as phoneInfoActions from '../modules/phoneInfo';\n\nclass PhoneInfoListContainer extends Component {\n\n  onSave = (values) => {\n    const { PhoneInfoActions } = this.props;\n    PhoneInfoActions.add(values);\n  }\n\n  render() {\n    const { phoneInfoList} = this.props;\n    console.log(phoneInfoList);\n    return (\n      <div>\n        <PhoneInfoForm \n          onSave={this.onSave}\n        />\n        <PhoneInfoList \n          data={phoneInfoList}\n        />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    phoneInfoList: state.phoneInfo.phoneInfoList\n  }),\n\n  (dispatch) => ({\n    PhoneInfoActions: bindActionCreators(phoneInfoActions, dispatch),\n  }),\n\n)(PhoneInfoListContainer);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/modules/index.js\nimport { combineReducers } from 'redux';\n\nimport phoneInfo from './phoneInfo';\n\nexport default combineReducers({\n  phoneInfo,\n});","// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {\n  App\n} from './containers';\n\nimport * as serviceWorker from './serviceWorker';\n\n// modules for store\nimport { createStore } from 'redux';\nimport reducers from './modules';\nimport { Provider } from 'react-redux';\n\n// create store\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}